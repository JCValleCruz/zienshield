# =================================================================
# ZIENSHIELD - CONFIGURACIÓN NGINX REVERSE PROXY
# =================================================================

upstream backend {
    least_conn;
    server backend:3001 max_fails=3 fail_timeout=30s;
}

upstream frontend {
    least_conn;
    server frontend:80 max_fails=3 fail_timeout=30s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=auth:10m rate=3r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=general:10m rate=60r/m;

# Cache zones
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m;

server {
    listen 80;
    server_name _;
    
    # Configuración de seguridad
    server_tokens off;
    client_max_body_size 10M;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' http://backend:3001 ws://backend:3001" always;
    
    # Logging
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;
    
    # =================================================================
    # HEALTH CHECKS Y MONITORING
    # =================================================================
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 172.20.0.0/16;  # Solo red interna Docker
        deny all;
    }
    
    # =================================================================
    # API BACKEND ROUTES
    # =================================================================
    location /api/ {
        # Rate limiting más estricto para API
        limit_req zone=api burst=10 nodelay;
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Proxy configuration
        proxy_pass http://backend/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Cache para endpoints específicos
        proxy_cache api_cache;
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Endpoints de autenticación con rate limiting más estricto
    location ~ ^/api/(auth|login) {
        limit_req zone=auth burst=3 nodelay;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # No cache para auth
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }
    
    # WebSocket support para métricas en tiempo real
    location /api/ws {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }
    
    # Métricas Prometheus (solo red interna)
    location /metrics {
        allow 172.20.0.0/16;  # Solo red interna Docker
        deny all;
        
        proxy_pass http://backend/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        access_log off;
    }
    
    # =================================================================
    # FRONTEND ROUTES
    # =================================================================
    location / {
        # Rate limiting general
        limit_req zone=general burst=20 nodelay;
        
        # Proxy al frontend
        proxy_pass http://frontend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache para assets estáticos
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_cache api_cache;
            proxy_cache_valid 200 1d;
            add_header Cache-Control "public, max-age=86400";
            add_header X-Cache-Status $upstream_cache_status;
            expires 1d;
        }
    }
    
    # =================================================================
    # ERROR PAGES
    # =================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        proxy_pass http://frontend/50x.html;
    }
    
    location = /404.html {
        proxy_pass http://frontend/404.html;
    }
    
    # =================================================================
    # SECURITY & BLOCKED PATHS
    # =================================================================
    # Bloquear acceso a archivos sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    location ~ \.(env|backup|bak|tmp|log)$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    # Robots.txt
    location = /robots.txt {
        proxy_pass http://frontend/robots.txt;
        access_log off;
    }
    
    # Favicon
    location = /favicon.ico {
        proxy_pass http://frontend/favicon.ico;
        access_log off;
        expires 1d;
    }
}

# =================================================================
# HTTPS SERVER (Para cuando se configure SSL)
# =================================================================
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     ssl_certificate /etc/ssl/certs/your-domain.crt;
#     ssl_certificate_key /etc/ssl/certs/your-domain.key;
#     
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # Resto de configuración igual que HTTP...
# }