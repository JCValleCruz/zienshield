const pool = require('../super-admin/backend/config/database');

async function cleanTestData() {
  const client = await pool.connect();
  
  try {
    console.log('🧹 Limpiando datos de prueba de vulnerabilidades...');
    
    // 1. Ver qué datos de prueba existen
    const testData = await client.query(`
      SELECT agent_id, agent_name, critical_count, high_count, total_count, last_scan
      FROM agent_vulnerabilities 
      WHERE agent_name LIKE '%Test%' OR agent_id LIKE '%test%'
      ORDER BY last_scan DESC
    `);
    
    console.log('\n📋 Datos de prueba encontrados:');
    testData.rows.forEach((row, index) => {
      console.log(`${index + 1}. Agent ID: ${row.agent_id}, Nombre: ${row.agent_name}, Vulns: ${row.total_count}, Scan: ${row.last_scan}`);
    });
    
    // 2. Eliminar datos de prueba
    if (testData.rows.length > 0) {
      const deleteResult = await client.query(`
        DELETE FROM agent_vulnerabilities 
        WHERE agent_name LIKE '%Test%' OR agent_id LIKE '%test%'
      `);
      
      console.log(`\n🗑️ Eliminados ${deleteResult.rowCount} registros de prueba`);
    }
    
    // 3. Ver qué datos reales quedan
    const realData = await client.query(`
      SELECT agent_id, agent_name, critical_count, high_count, total_count, last_scan
      FROM agent_vulnerabilities 
      ORDER BY last_scan DESC
      LIMIT 10
    `);
    
    console.log('\n📊 Datos reales restantes:');
    if (realData.rows.length === 0) {
      console.log('   ⚠️ No hay datos de vulnerabilidades reales');
      console.log('   ℹ️ El servicio automático los regenerará en 10 minutos');
    } else {
      realData.rows.forEach((row, index) => {
        console.log(`${index + 1}. Agent ID: ${row.agent_id}, Nombre: ${row.agent_name}, Vulns: ${row.total_count}`);
      });
    }
    
  } catch (error) {
    console.error('❌ Error:', error);
  } finally {
    client.release();
  }
}

cleanTestData()
  .then(() => {
    console.log('\n✅ Limpieza completada');
    process.exit(0);
  })
  .catch(error => {
    console.error('💥 Error:', error);
    process.exit(1);
  });