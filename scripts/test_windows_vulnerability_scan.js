const { analyzeAgentVulnerabilities, scanPackageForVulnerabilities } = require('../super-admin/backend/src/utils/vulnerabilityScanner');

// Test with some Windows packages we found in the real system
const testPackages = [
  { name: 'TeamViewer 12', version: '12.0.92938' },
  { name: 'Adobe Acrobat DC', version: '2024.1.20643' },
  { name: 'Microsoft Visual C++ 2015-2022 Redistributable (x64)', version: '14.38.33135' },
  { name: 'Microsoft .NET Framework 4.8', version: '4.8.04161' },
  { name: 'Microsoft Edge', version: '127.0.2651.105' },
  { name: 'Google Chrome', version: '127.0.6533.120' },
  { name: 'Mozilla Firefox', version: '128.0.3' },
  { name: 'Microsoft Office Professional Plus 2021', version: '16.0.17830.20138' },
  { name: 'Realtek High Definition Audio Driver', version: '6.0.9447.1' },
  { name: 'Intel(R) Graphics Driver', version: '31.0.101.4502' }
];

console.log('üß™ Probando detecci√≥n de vulnerabilidades en software Windows...\n');

// Test individual package scanning
for (const pkg of testPackages) {
  console.log(`üì¶ Analizando: ${pkg.name} v${pkg.version}`);
  const vulnerabilities = scanPackageForVulnerabilities(pkg.name, pkg.version);
  
  if (vulnerabilities.length > 0) {
    console.log(`   ‚ö†Ô∏è ${vulnerabilities.length} vulnerabilidades encontradas:`);
    vulnerabilities.forEach(vuln => {
      console.log(`      - ${vuln.cve} (${vuln.severity.toUpperCase()}) CVSS: ${vuln.cvss_score}`);
      console.log(`        ${vuln.description}`);
    });
  } else {
    console.log('   ‚úÖ No se encontraron vulnerabilidades');
  }
  console.log('');
}

// Test full agent analysis
console.log('üîç An√°lisis completo del agente de prueba...');
analyzeAgentVulnerabilities('test-agent', testPackages)
  .then(result => {
    console.log(`\nüìä Resumen de vulnerabilidades:`);
    console.log(`   Cr√≠ticas: ${result.critical.length}`);
    console.log(`   Altas: ${result.high.length}`);
    console.log(`   Medias: ${result.medium.length}`);
    console.log(`   Bajas: ${result.low.length}`);
    console.log(`   Total: ${result.total}`);
    
    if (result.total > 0) {
      console.log('\nüéØ Detalles de vulnerabilidades cr√≠ticas y altas:');
      [...result.critical, ...result.high].forEach(vuln => {
        console.log(`   ${vuln.cve} - ${vuln.package_name} v${vuln.package_version}`);
        console.log(`   Severidad: ${vuln.severity.toUpperCase()}, CVSS: ${vuln.cvss_score}`);
        console.log(`   ${vuln.description}\n`);
      });
    }
    
    console.log('‚úÖ Prueba completada');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error en el an√°lisis:', error);
    process.exit(1);
  });