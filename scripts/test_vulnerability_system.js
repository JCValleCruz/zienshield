const { 
  analyzeAgentVulnerabilities, 
  saveVulnerabilityData, 
  getStoredVulnerabilities,
  getCompanyVulnerabilitySummary 
} = require('../super-admin/backend/src/utils/vulnerabilityScanner');

async function testVulnerabilitySystem() {
  console.log('🧪 Probando el nuevo sistema de vulnerabilidades...\n');

  try {
    // Test 1: Analizar vulnerabilidades con paquetes de ejemplo
    console.log('1. 📦 Probando análisis de vulnerabilidades:');
    const mockPackages = [
      { name: 'openssl', version: '1.1.1f' },
      { name: 'openssh-server', version: '8.2p1' },
      { name: 'sudo', version: '1.8.31' },
      { name: 'curl', version: '7.68.0' },
      { name: 'nginx', version: '1.18.0' },
      { name: 'mysql-server', version: '8.0.25' }
    ];

    const vulnerabilities = await analyzeAgentVulnerabilities('test-001', mockPackages);
    console.log('   ✅ Vulnerabilidades encontradas:');
    console.log(`      - Críticas: ${vulnerabilities.critical.length}`);
    console.log(`      - Altas: ${vulnerabilities.high.length}`);
    console.log(`      - Medias: ${vulnerabilities.medium.length}`);
    console.log(`      - Bajas: ${vulnerabilities.low.length}`);
    console.log(`      - Total: ${vulnerabilities.total}`);
    
    if (vulnerabilities.critical.length > 0) {
      console.log('   🚨 CVEs críticos encontrados:');
      vulnerabilities.critical.forEach(cve => {
        console.log(`      - ${cve.cve}: ${cve.description} (CVSS: ${cve.cvss_score})`);
      });
    }
    console.log('');

    // Test 2: Guardar datos en base de datos
    console.log('2. 💾 Probando almacenamiento en base de datos:');
    await saveVulnerabilityData(1, 'test-001', 'Test Agent', vulnerabilities);
    console.log('   ✅ Datos guardados exitosamente');
    console.log('');

    // Test 3: Recuperar datos almacenados
    console.log('3. 📚 Probando recuperación de datos:');
    const storedVulns = await getStoredVulnerabilities(1, 'test-001');
    if (storedVulns.length > 0) {
      const stored = storedVulns[0];
      console.log('   ✅ Datos recuperados:');
      console.log(`      - Agente: ${stored.agent_name}`);
      console.log(`      - Críticas: ${stored.counts.critical}`);
      console.log(`      - Total: ${stored.counts.total}`);
      console.log(`      - Último escaneo: ${stored.last_scan}`);
    }
    console.log('');

    // Test 4: Resumen por empresa
    console.log('4. 📊 Probando resumen por empresa:');
    const summary = await getCompanyVulnerabilitySummary(1);
    console.log('   ✅ Resumen obtenido:');
    console.log(`      - Agentes total: ${summary.total_agents}`);
    console.log(`      - Vulnerabilidades críticas: ${summary.vulnerabilities.critical}`);
    console.log(`      - Vulnerabilidades total: ${summary.vulnerabilities.total}`);
    console.log('');

    console.log('🎉 Todas las pruebas completadas exitosamente!');

  } catch (error) {
    console.error('❌ Error en pruebas:', error);
  }
}

testVulnerabilitySystem()
  .then(() => {
    console.log('✨ Pruebas finalizadas');
    process.exit(0);
  })
  .catch((error) => {
    console.error('💥 Error:', error);
    process.exit(1);
  });