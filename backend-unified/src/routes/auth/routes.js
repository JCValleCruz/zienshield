/**
 * RUTAS DE AUTENTICACI√ìN UNIFICADAS
 *
 * Define todos los endpoints de autenticaci√≥n:
 * - Login multi-tenant
 * - Impersonaci√≥n de empresas
 * - Renovaci√≥n de tokens
 * - Logout (futuro)
 */

const express = require('express');
const AuthController = require('./controller');
const { createSmartRateLimit } = require('../../middleware/rateLimiting');
const { requireAuth, requireSuperAdmin, auditAuthenticatedAction } = require('../../middleware/auth');
const { getDatabaseService } = require('../../services/databaseService');

/**
 * Crear router de autenticaci√≥n con todas las rutas configuradas
 *
 * ¬øQu√© hace? Configura todas las rutas de auth con middlewares apropiados
 * ¬øPor qu√©? Organizaci√≥n modular y reutilizaci√≥n
 * ¬øPara qu√©? Sistema de autenticaci√≥n completo
 */
function createAuthRouter() {
  console.log('üîê Configurando rutas de autenticaci√≥n...');

  const router = express.Router();
  
  // Inicializar controlador con servicio de base de datos
  const databaseService = getDatabaseService();
  const authController = new AuthController(databaseService);

  // Rate limiting espec√≠fico para auth (muy restrictivo)
  const smartRateLimit = createSmartRateLimit();

  // ====================================================================
  // RUTAS P√öBLICAS (NO REQUIEREN AUTENTICACI√ìN)
  // ====================================================================

  /**
   * POST /api/auth/login - Login multi-tenant
   *
   * Autentica super admins y administradores de empresa
   * Rate limiting: Muy restrictivo (5 intentos/15min)
   */
  router.post('/login', 
    smartRateLimit, // Rate limiting autom√°tico para /auth/
    authController.login.bind(authController)
  );

  /**
   * GET /api/auth/auto-login/:token - Auto-login con token de impersonaci√≥n
   *
   * Permite auto-login usando token de impersonaci√≥n obtenido previamente
   * No requiere autenticaci√≥n previa (el token ya contiene la autorizaci√≥n)
   */
  router.get('/auto-login/:token',
    smartRateLimit,
    authController.autoLogin.bind(authController)
  );

  // ====================================================================
  // RUTAS PROTEGIDAS (REQUIEREN AUTENTICACI√ìN)
  // ====================================================================

  /**
   * POST /api/auth/refresh - Renovar token JWT
   *
   * Permite renovar tokens pr√≥ximos a expirar
   * Requiere: Token v√°lido (puede estar pr√≥ximo a expirar)
   */
  router.post('/refresh',
    smartRateLimit,
    requireAuth,
    auditAuthenticatedAction,
    authController.refreshToken.bind(authController)
  );

  // ====================================================================
  // RUTAS DE SUPER ADMIN (REQUIEREN ROL SUPER_ADMIN)
  // ====================================================================

  /**
   * POST /api/auth/impersonate/:tenantId - Impersonar empresa
   *
   * Permite a super admins impersonar empresas para soporte
   * Requiere: Rol super_admin
   * Auditor√≠a: Cr√≠tica - todas las impersonaciones se registran
   */
  router.post('/impersonate/:tenantId',
    smartRateLimit,
    requireAuth,
    requireSuperAdmin,
    auditAuthenticatedAction,
    authController.impersonateCompany.bind(authController)
  );

  // ====================================================================
  // RUTAS DE INFORMACI√ìN Y UTILIDAD
  // ====================================================================

  /**
   * GET /api/auth/me - Informaci√≥n del usuario actual
   *
   * Devuelve informaci√≥n del usuario autenticado
   * √ötil para verificar estado de sesi√≥n
   */
  router.get('/me',
    requireAuth,
    (req, res) => {
      console.log(`üë§ Informaci√≥n solicitada por: ${req.user.email}`);

      res.json({
        success: true,
        user: {
          email: req.user.email,
          role: req.user.role,
          tenant_id: req.user.tenant_id,
          company_id: req.user.company_id,
          is_impersonated: req.user.is_impersonated || false,
          original_role: req.user.original_role,
          token_expires_at: new Date(req.user.exp * 1000).toISOString()
        },
        timestamp: new Date().toISOString()
      });
    }
  );

  /**
   * POST /api/auth/logout - Cerrar sesi√≥n
   *
   * Nota: En un sistema JWT sin estado, el logout se maneja en el frontend
   * Este endpoint existe para logging y futuras implementaciones
   */
  router.post('/logout',
    requireAuth,
    auditAuthenticatedAction,
    (req, res) => {
      console.log(`üëã Logout solicitado por: ${req.user.email}`);

      // Log de auditor√≠a para logout
      console.log('üìù AUDITOR√çA - Logout:', {
        timestamp: new Date().toISOString(),
        user: req.user.email,
        role: req.user.role,
        tenant_id: req.user.tenant_id,
        is_impersonated: req.user.is_impersonated || false,
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        requestId: req.requestId
      });

      res.json({
        success: true,
        message: 'Sesi√≥n cerrada exitosamente',
        timestamp: new Date().toISOString()
      });
    }
  );

  /**
   * GET /api/auth/health - Health check del m√≥dulo de autenticaci√≥n
   *
   * Verifica que el sistema de autenticaci√≥n funciona correctamente
   */
  router.get('/health', (req, res) => {
    console.log('‚ù§Ô∏è Health check m√≥dulo autenticaci√≥n');

    res.json({
      module: 'authentication',
      status: 'healthy',
      features: {
        jwt_auth: 'enabled',
        multi_tenant: 'enabled', 
        impersonation: 'enabled',
        token_refresh: 'enabled',
        role_based_access: 'enabled'
      },
      endpoints: {
        login: 'POST /api/auth/login',
        autoLogin: 'GET /api/auth/auto-login/:token',
        refresh: 'POST /api/auth/refresh',
        impersonate: 'POST /api/auth/impersonate/:tenantId',
        me: 'GET /api/auth/me',
        logout: 'POST /api/auth/logout',
        health: 'GET /api/auth/health'
      },
      security: {
        rate_limiting: 'enabled',
        jwt_verification: 'enabled',
        role_validation: 'enabled',
        audit_logging: 'enabled'
      },
      timestamp: new Date().toISOString()
    });
  });

  console.log('‚úÖ Rutas de autenticaci√≥n configuradas correctamente');
  console.log('üìä Rutas disponibles:');
  console.log('   POST   /api/auth/login           - Login multi-tenant');
  console.log('   GET    /api/auth/auto-login/:token - Auto-login con token de impersonaci√≥n');
  console.log('   POST   /api/auth/refresh         - Renovar token');
  console.log('   POST   /api/auth/impersonate/:id - Impersonar empresa (super admin)');
  console.log('   GET    /api/auth/me             - Info usuario actual');
  console.log('   POST   /api/auth/logout          - Cerrar sesi√≥n');
  console.log('   GET    /api/auth/health          - Health check');

  return router;
}

module.exports = {
  createAuthRouter
};