const pool = require('../../config/database');
const WazuhSyncService = require('../../../../api/src/wazuh-sync');

// Instancia del servicio de Wazuh
const wazuhService = new WazuhSyncService();

// Obtener estad√≠sticas globales del sistema
const getGlobalStats = async (req, res) => {
  try {
    console.log('üìä Obteniendo estad√≠sticas globales del sistema...');

    // ========== CONSULTAS A BASE DE DATOS (TABLA COMPANIES) ==========
    
    // Estad√≠sticas de empresas (tabla que S√ç existe)
    const companiesQuery = `
      SELECT
        COUNT(*) as total_companies,
        COUNT(CASE WHEN wazuh_group IS NOT NULL THEN 1 END) as synced_companies
      FROM companies
    `;

    console.log('üè¢ Consultando estad√≠sticas de empresas en BD...');
    const companiesResult = await pool.query(companiesQuery);

    // ========== CONSULTAS A WAZUH API ==========
    
    console.log('üîó Conectando con Wazuh API...');
    
    let wazuhStats = {
      agents: { total: 0, active: 0, disconnected: 0, pending: 0, never_connected: 0 },
      alerts: { total: 0, critical: 0, high: 0, medium: 0, low: 0 },
      wazuh: { status: 'disconnected', version: 'unknown', last_check: new Date().toISOString() }
    };

    try {
      // Obtener estad√≠sticas completas desde Wazuh
      const dashboardStats = await wazuhService.getDashboardStats();
      wazuhStats.agents = dashboardStats.agents;
      wazuhStats.alerts = dashboardStats.alerts;
      wazuhStats.wazuh = {
        status: 'connected',
        version: '4.8.0',
        last_check: dashboardStats.timestamp
      };

      console.log('‚úÖ Estad√≠sticas de Wazuh obtenidas exitosamente');
      console.log(`üìä Agentes encontrados: ${wazuhStats.agents.total}`);
      console.log(`üö® Alertas encontradas: ${wazuhStats.alerts.total}`);

    } catch (wazuhError) {
      console.error('‚ùå Error conectando con Wazuh API:', wazuhError.message);
      console.log('‚ö†Ô∏è  Usando datos por defecto para Wazuh');
      
      // Mantener estructura pero con estado de error
      wazuhStats.wazuh = {
        status: 'error',
        version: 'unknown',
        error: wazuhError.message,
        last_check: new Date().toISOString()
      };
    }

    // ========== CALCULAR M√âTRICAS DERIVADAS ==========

    // Calcular amenazas bloqueadas basado en alertas
    const threatsBlocked = (wazuhStats.alerts.critical * 12) +
                          (wazuhStats.alerts.high * 8) +
                          (wazuhStats.alerts.medium * 3) +
                          (wazuhStats.alerts.low * 1);

    // Calcular compliance promedio (simulado)
    const totalCompanies = parseInt(companiesResult.rows[0].total_companies);
    const syncedCompanies = parseInt(companiesResult.rows[0].synced_companies);
    const compliancePercentage = totalCompanies > 0 ? 
      Math.round((syncedCompanies / totalCompanies) * 100) : 0;

    // ========== RESPUESTA ESTRUCTURADA ==========

    const globalStats = {
      // Datos de empresas desde BD
      companies: {
        total: totalCompanies,
        active: syncedCompanies,
        synced: syncedCompanies,
        pending_sync: totalCompanies - syncedCompanies
      },
      
      // Datos de agentes desde Wazuh API
      agents: {
        total: wazuhStats.agents.total,
        active: wazuhStats.agents.active,
        inactive: wazuhStats.agents.disconnected,
        pending: wazuhStats.agents.pending,
        never_connected: wazuhStats.agents.never_connected
      },
      
      // Datos de alertas desde Wazuh API
      alerts: {
        total: wazuhStats.alerts.total,
        critical: wazuhStats.alerts.critical,
        high: wazuhStats.alerts.high,
        medium: wazuhStats.alerts.medium,
        low: wazuhStats.alerts.low
      },
      
      // M√©tricas calculadas
      compliance: {
        average: compliancePercentage
      },
      
      threats: {
        blocked: threatsBlocked || 0
      },
      
      // Estado de conexi√≥n con Wazuh
      wazuh: wazuhStats.wazuh,
      
      // Metadatos
      timestamp: new Date().toISOString(),
      data_sources: {
        companies: 'postgresql',
        agents: wazuhStats.wazuh.status === 'connected' ? 'wazuh_api' : 'fallback',
        alerts: wazuhStats.wazuh.status === 'connected' ? 'wazuh_api' : 'fallback'
      }
    };

    console.log('‚úÖ Estad√≠sticas globales calculadas exitosamente');
    console.log(`üìä Resumen: ${globalStats.companies.total} empresas, ${globalStats.agents.total} agentes, ${globalStats.alerts.total} alertas`);

    res.json({
      success: true,
      data: globalStats
    });

  } catch (error) {
    console.error('‚ùå Error cr√≠tico obteniendo estad√≠sticas globales:', error);
    console.error('Stack trace:', error.stack);
    
    res.status(500).json({
      success: false,
      error: 'Error obteniendo estad√≠sticas globales',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

module.exports = {
  getGlobalStats
};
