import React, { useState, useEffect } from 'react';
import { Shield, Monitor, AlertTriangle, Building2, Users, Loader, Trash2, Plus, X, Eye, EyeOff, Edit, RefreshCw } from 'lucide-react';
import { apiService, Company, CreateCompanyData, GlobalStats } from '../services/api';
import SystemMetricsGrid from './SystemMetricsGrid';

const Dashboard: React.FC = () => {
  const [companies, setCompanies] = useState<Company[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Estados para estad√≠sticas globales
  const [globalStats, setGlobalStats] = useState<GlobalStats | null>(null);
  const [statsLoading, setStatsLoading] = useState(false);
  
  // Estados para modal de eliminaci√≥n
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [companyToDelete, setCompanyToDelete] = useState<Company | null>(null);
  const [deleteConfirmText, setDeleteConfirmText] = useState("");

  // Estados para modal de agregar/editar empresa
  const [companyModalOpen, setCompanyModalOpen] = useState(false);
  const [isCreating, setIsCreating] = useState(false);
  const [createError, setCreateError] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editingCompany, setEditingCompany] = useState<Company | null>(null);

  // Estado del formulario
  const [formData, setFormData] = useState({
    name: '',
    sector: '',
    admin_name: '',
    admin_phone: '',
    admin_email: '',
    admin_password: ''
  });

  // Errores de validaci√≥n
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Estados para sincronizaci√≥n con Wazuh
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncMessage, setSyncMessage] = useState<string | null>(null);

  // Funci√≥n para generar UUID v4
  const generateUUID = (): string => {
    // Usar crypto.randomUUID() si est√° disponible (navegadores modernos)
    if (typeof crypto !== 'undefined' && crypto.randomUUID) {
      return crypto.randomUUID();
    }
    
    // Fallback para navegadores m√°s antiguos
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  };

  // Test de conexi√≥n API
  const testApiConnection = async () => {
    try {
      console.log('üîç Probando conexi√≥n API...');
      console.log('üîó API Base URL:', 'http://194.164.172.92:3001/api');
      
      const response = await fetch('http://194.164.172.92:3001/api/health');
      console.log('üì° Status de conexi√≥n:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API Health Check:', data);
      } else {
        console.error('‚ùå API Health Check fall√≥:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('‚ùå Error en test de conexi√≥n:', error);
    }
  };

  // Cargar estad√≠sticas globales
  const loadGlobalStats = async () => {
    try {
      setStatsLoading(true);
      console.log('üìä Cargando estad√≠sticas globales...');
      
      const statsResponse = await apiService.getGlobalStats();
      
      if (statsResponse.success) {
        setGlobalStats(statsResponse.data);
        console.log('‚úÖ Estad√≠sticas cargadas:', statsResponse.data);
      } else {
        throw new Error(statsResponse.error || 'Error cargando estad√≠sticas');
      }
      
    } catch (error) {
      console.error('‚ùå Error cargando estad√≠sticas:', error);
      // En caso de error, usar datos por defecto
      setGlobalStats({
        companies: { total: companies.length, synced: 0 },
        agents: { total: 0, active: 0, inactive: 0, pending: 0 },
        alerts: { total: 0, critical: 0, high: 0, medium: 0, low: 0 },
        compliance: { average: 85 },
        threats: { blocked: 0 },
        wazuh: { status: 'disconnected', version: 'unknown', last_check: new Date().toISOString() },
        timestamp: new Date().toISOString()
      });
    } finally {
      setStatsLoading(false);
    }
  };

  const loadDashboardData = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Cargar empresas
      console.log('üìã Cargando empresas...');
      console.log('üîó API URL:', 'http://194.164.172.92:3001/api/companies');
      
      const companiesResponse = await apiService.getCompanies();
      console.log('üì¶ Respuesta completa:', companiesResponse);
      
      if (companiesResponse.success) {
        setCompanies(companiesResponse.data);
        console.log(`‚úÖ ${companiesResponse.data.length} empresas cargadas`);
      } else {
        throw new Error(companiesResponse.error || 'Error desconocido');
      }
      
    } catch (error) {
      console.error('‚ùå Error cargando dashboard:', error);
      if (error instanceof Error) {
        console.error('‚ùå Error stack:', error.stack);
      }
      
      // MODO DESARROLLO: Simular datos cuando el servidor no est√° disponible
      if (error instanceof Error && error.message.includes('Failed to fetch')) {
        console.log('üîß Modo desarrollo: Usando datos simulados');
        setCompanies([
          {
            id: 1,
            name: 'Axafone Telecom',
            sector: 'TELECOM',
            tenant_id: 'axafone-telecom-001',
            admin_name: 'Juan P√©rez',
            admin_phone: '+34 123 456 789',
            admin_email: 'admin@axafone.com',
            created_at: '2025-01-15T10:30:00Z'
          },
          {
            id: 2,
            name: 'Bufete Legal Madrid',
            sector: 'LEGAL',
            tenant_id: 'legal-madrid-002',
            admin_name: 'Mar√≠a Gonz√°lez',
            admin_phone: '+34 987 654 321',
            admin_email: 'admin@legalmd.com',
            created_at: '2025-01-14T09:15:00Z'
          }
        ]);
        console.log('‚úÖ 2 empresas simuladas cargadas');
      } else {
        setError(error instanceof Error ? error.message : 'Error desconocido');
      }
    } finally {
      setIsLoading(false);
      // Cargar estad√≠sticas despu√©s de cargar empresas
      if (!error) {
        await loadGlobalStats();
      }
    }
  };

  useEffect(() => {
    const initializeData = async () => {
      await testApiConnection();
      await loadDashboardData();
    };

    initializeData();
  }, []);

  // Funciones para modal de agregar/editar empresa
  const handleAddCompany = () => {
    setIsEditMode(false);
    setEditingCompany(null);
    setCompanyModalOpen(true);
    resetForm();
  };

  const handleEditCompany = async (company: Company) => {
    setIsEditMode(true);
    setEditingCompany(company);
    setCompanyModalOpen(true);
    
    // Usar datos disponibles directamente sin hacer petici√≥n adicional
    // ya que el backend no tiene GET /companies/:id
    setFormData({
      name: company.name || '',
      sector: company.sector || '',
      admin_name: company.admin_name || '',
      admin_phone: company.admin_phone || '', // Usar el campo si est√° disponible
      admin_email: company.admin_email || '',
      admin_password: '' // Siempre vac√≠o por seguridad
    });
    
    setFormErrors({});
    setCreateError(null);
    setShowPassword(false);
    
    console.log('‚úÖ Datos cargados para edici√≥n:', company);
  };

  const closeCompanyModal = () => {
    setCompanyModalOpen(false);
    setIsEditMode(false);
    setEditingCompany(null);
    resetForm();
  };

  const resetForm = () => {
    setFormData({
      name: '',
      sector: '',
      admin_name: '',
      admin_phone: '',
      admin_email: '',
      admin_password: ''
    });
    setFormErrors({});
    setCreateError(null);
    setShowPassword(false);
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ 
      ...prev, 
      [field]: value || '' // Asegurar que nunca sea undefined
    }));
    
    // Limpiar error del campo cuando el usuario empiece a escribir
    if (formErrors[field]) {
      setFormErrors((prev: Record<string, string>) => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};

    // Solo validar el nombre como obligatorio
    if (!formData.name || !formData.name.trim()) {
      errors.name = 'El nombre de la empresa es obligatorio';
    }

    // Validar formato de email solo si se proporciona
    if (formData.admin_email && formData.admin_email.trim()) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.admin_email)) {
        errors.admin_email = 'El formato del email no es v√°lido';
      }
    }

    // Validar longitud de contrase√±a solo si se proporciona
    if (formData.admin_password && formData.admin_password.trim() && formData.admin_password.length < 6) {
      errors.admin_password = 'La contrase√±a debe tener al menos 6 caracteres';
    }

    // Validar longitudes m√°ximas solo si se proporcionan
    if (formData.name && formData.name.length > 255) errors.name = 'El nombre no puede exceder 255 caracteres';
    if (formData.sector && formData.sector.length > 100) errors.sector = 'El sector no puede exceder 100 caracteres';
    if (formData.admin_name && formData.admin_name.length > 255) errors.admin_name = 'El nombre del administrador no puede exceder 255 caracteres';
    if (formData.admin_phone && formData.admin_phone.length > 20) errors.admin_phone = 'El tel√©fono no puede exceder 20 caracteres';
    if (formData.admin_email && formData.admin_email.length > 255) errors.admin_email = 'El email no puede exceder 255 caracteres';

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      setIsCreating(true);
      setCreateError(null);

      // ‚úÖ CORREGIDO: Datos preparados para coincidir con backend
      const submitData: CreateCompanyData = {
        company_name: formData.name.trim(),     // ‚Üê Cambiar 'name' a 'company_name'
        sector: formData.sector.trim() || 'OTHER',
        admin_phone: formData.admin_phone.trim() || '+34 000 000 000',
        admin_email: formData.admin_email.trim() || `admin@${formData.name.toLowerCase().replace(/\s+/g, '')}.com`,
        admin_password: formData.admin_password.trim() || 'password123'
        // ‚ùå NO enviar tenant_id (backend lo genera autom√°ticamente)
        // ‚ùå NO enviar admin_name (backend no lo usa actualmente)
      };

      console.log('üìã Datos a enviar:', submitData);
      console.log('üìã Datos individuales:', {
        company_name: `"${submitData.company_name}"`,
        sector: `"${submitData.sector}"`,
        admin_phone: `"${submitData.admin_phone}"`,
        admin_email: `"${submitData.admin_email}"`,
        admin_password: `"${submitData.admin_password}"`
      });

      if (isEditMode && editingCompany) {
        // Actualizar empresa existente
        console.log('‚úèÔ∏è Actualizando empresa:', submitData.company_name);
        const response = await apiService.updateCompany(editingCompany.id, submitData);

        if (response.success) {
          console.log('‚úÖ Empresa actualizada exitosamente:', response.data);
          
          // Actualizar lista de empresas
          setCompanies(prev => prev.map(c => 
            c.id === editingCompany.id ? response.data : c
          ));
          
          // Cerrar modal
          closeCompanyModal();
          
          // Mostrar mensaje de √©xito
          alert(`¬°Empresa "${response.data.name}" actualizada exitosamente!`);
          
          // Recargar estad√≠sticas
          await loadGlobalStats();
        }
      } else {
        // Crear nueva empresa
        console.log('‚ûï Creando empresa:', submitData.company_name);
        console.log('üîó URL a llamar:', 'http://194.164.172.92:3001/api/companies');
        console.log('üì¶ M√©todo:', 'POST');
        console.log('üìã Headers:', { 'Content-Type': 'application/json' });
        
        const response = await apiService.createCompany(submitData);
        console.log('üì¶ Respuesta de crear empresa:', response);

        if (response.success) {
          console.log('‚úÖ Empresa creada exitosamente:', response.data);
          
          // Actualizar lista de empresas
          setCompanies(prev => [...prev, response.data]);
          
          // Cerrar modal
          closeCompanyModal();
          
          // Mostrar mensaje de √©xito
          alert(`¬°Empresa "${response.data.name}" creada exitosamente!`);
          
          // Recargar estad√≠sticas
          await loadGlobalStats();
        }
      }
    } catch (error) {
      console.error('‚ùå Error:', error);
      setCreateError(error instanceof Error ? error.message : 'Error desconocido');
    } finally {
      setIsCreating(false);
    }
  };

  // Funciones para modal de eliminaci√≥n
  const handleDeleteCompany = (company: Company) => {
    console.log('üóëÔ∏è Intentando eliminar empresa:', company); // Debug
    setCompanyToDelete(company);
    setDeleteModalOpen(true);
    setDeleteConfirmText("");
  };

  const confirmDeleteCompany = async () => {
    if (!companyToDelete || deleteConfirmText !== companyToDelete.tenant_id) {
      return;
    }

    try {
      console.log("üóëÔ∏è Eliminando empresa:", companyToDelete.name);
      
      // Llamar a la API DELETE
      const response = await apiService.deleteCompany(companyToDelete.id);
      
      if (response.success) {
        console.log("‚úÖ Empresa eliminada de la BD");
        
        // Actualizar lista local
        setCompanies(companies.filter(c => c.id !== companyToDelete.id));
        
        // Cerrar modal
        setDeleteModalOpen(false);
        setCompanyToDelete(null);
        setDeleteConfirmText("");
        
        // Mensaje de √©xito
        alert(`Empresa "${companyToDelete.name}" eliminada exitosamente`);
        
        // Recargar estad√≠sticas
        await loadGlobalStats();
      }
    } catch (error) {
      console.error("‚ùå Error:", error);
      alert(`Error: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    }
  };

  const cancelDelete = () => {
    setDeleteModalOpen(false);
    setCompanyToDelete(null);
    setDeleteConfirmText("");
  };

  // Funci√≥n para sincronizar con Wazuh (con manejo de errores)
  const handleSyncWithWazuh = async () => {
    try {
      setIsSyncing(true);
      setSyncMessage(null);
      
      console.log('üîÑ Iniciando sincronizaci√≥n con Wazuh...');
      
      // Verificar si el m√©todo existe antes de llamarlo
      if (typeof apiService.syncCompaniesWithWazuh === 'function') {
        const response = await apiService.syncCompaniesWithWazuh();
        
        if (response.success) {
          setSyncMessage('‚úÖ Sincronizaci√≥n completada exitosamente');
          // Recargar datos despu√©s de la sincronizaci√≥n
          await loadDashboardData();
        } else {
          setSyncMessage('‚ùå Error en la sincronizaci√≥n: ' + (response.error || 'Error desconocido'));
        }
      } else {
        setSyncMessage('‚ö†Ô∏è Funci√≥n de sincronizaci√≥n no disponible');
        console.warn('syncCompaniesWithWazuh no est√° disponible en apiService');
      }
      
    } catch (error) {
      console.error('‚ùå Error en sincronizaci√≥n:', error);
      setSyncMessage('‚ùå Error de conexi√≥n durante la sincronizaci√≥n');
    } finally {
      setIsSyncing(false);
      // Limpiar mensaje despu√©s de 5 segundos
      setTimeout(() => setSyncMessage(null), 5000);
    }
  };

  const getSectorColor = (sector: string) => {
    switch (sector) {
      case 'TELECOM': return 'bg-blue-500/10 text-blue-400 border-blue-500/20';
      case 'LEGAL': return 'bg-purple-500/10 text-purple-400 border-purple-500/20';
      case 'RETAIL': return 'bg-green-500/10 text-green-400 border-green-500/20';
      case 'TECH': return 'bg-cyan-500/10 text-cyan-400 border-cyan-500/20';
      case 'HEALTH': return 'bg-pink-500/10 text-pink-400 border-pink-500/20';
      case 'FINANCE': return 'bg-yellow-500/10 text-yellow-400 border-yellow-500/20';
      default: return 'bg-gray-500/10 text-gray-400 border-gray-500/20';
    }
  };

  // Funci√≥n auxiliar para verificar si una empresa tiene wazuh_group
  const hasWazuhGroup = (company: Company): boolean => {
    return !!(company as any).wazuh_group;
  };

  // Funci√≥n auxiliar para obtener el wazuh_group de una empresa
  const getWazuhGroup = (company: Company): string | null => {
    return (company as any).wazuh_group || null;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-slate-900 flex items-center justify-center">
        <div className="flex flex-col items-center space-y-4 text-slate-300">
          <Loader className="animate-spin h-8 w-8 text-blue-500" />
          <span className="text-lg">Cargando ZienSHIELD...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-900">
      {/* Header */}
      <div className="bg-slate-800 border-b border-slate-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-white flex items-center">
              <Shield className="h-8 w-8 mr-3 text-blue-500" />
              ZienSHIELD
            </h1>
          </div>
          
          {/* Botones del Header */}
          <div className="flex items-center space-x-3">
            <button
              onClick={handleAddCompany}
              className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              <Plus className="h-4 w-4" />
              <span>Agregar Empresa</span>
            </button>
            
            <button
              onClick={handleSyncWithWazuh}
              disabled={isSyncing}
              className="flex items-center space-x-2 bg-purple-600 hover:bg-purple-700 disabled:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              {isSyncing ? (
                <>
                  <Loader className="animate-spin h-4 w-4" />
                  <span>Sincronizando...</span>
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4" />
                  <span>Sync</span>
                </>
              )}
            </button>
            
            <button
              onClick={loadDashboardData}
              className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              <Monitor className="h-4 w-4" />
              <span>Actualizar</span>
            </button>
          </div>
        </div>
      </div>

      <div className="p-6">
        {/* Error State */}
        {error && (
          <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4 mb-6">
            <div className="flex items-center">
              <AlertTriangle className="h-5 w-5 text-red-400 mr-3" />
              <div>
                <h3 className="text-red-400 font-medium">Error de Conexi√≥n</h3>
                <p className="text-red-300 text-sm mt-1">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Mensaje de Sincronizaci√≥n */}
        {syncMessage && (
          <div className={`border rounded-lg p-4 mb-6 ${
            syncMessage.includes('‚úÖ') 
              ? 'bg-green-500/10 border-green-500/20' 
              : 'bg-yellow-500/10 border-yellow-500/20'
          }`}>
            <div className="flex items-center">
              <div className={`h-5 w-5 mr-3 ${
                syncMessage.includes('‚úÖ') ? 'text-green-400' : 'text-yellow-400'
              }`}>
                {syncMessage.includes('‚úÖ') ? '‚úÖ' : '‚ö†Ô∏è'}
              </div>
              <div>
                <h3 className={`font-medium ${
                  syncMessage.includes('‚úÖ') ? 'text-green-400' : 'text-yellow-400'
                }`}>
                  Sincronizaci√≥n con Wazuh
                </h3>
                <p className={`text-sm mt-1 ${
                  syncMessage.includes('‚úÖ') ? 'text-green-300' : 'text-yellow-300'
                }`}>
                  {syncMessage}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* NUEVO: M√©tricas del Sistema ZienSHIELD - COMPACTO */}
        <div className="mb-6">
          <SystemMetricsGrid />
        </div>

        {/* M√©tricas Generales - Grid de 4 columnas con datos reales */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Empresas Registradas */}
          <div className="bg-slate-800 border border-slate-700 rounded-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-2 bg-blue-500/10 rounded-lg">
                <Building2 className="h-6 w-6 text-blue-400" />
              </div>
              {statsLoading && (
                <Loader className="animate-spin h-4 w-4 text-blue-400" />
              )}
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">
                {globalStats?.companies.total || companies.length}
              </div>
              <div className="text-sm text-slate-400">
                Empresas Registradas
              </div>
            </div>
          </div>

          {/* Empresas Sincronizadas */}
          <div className="bg-slate-800 border border-slate-700 rounded-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-2 bg-green-500/10 rounded-lg">
                <Shield className="h-6 w-6 text-green-400" />
              </div>
              {statsLoading && (
                <Loader className="animate-spin h-4 w-4 text-green-400" />
              )}
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">
                {globalStats?.companies.synced || companies.filter(c => hasWazuhGroup(c)).length}
              </div>
              <div className="text-sm text-slate-400">
                Empresas Sincronizadas
              </div>
            </div>
          </div>

          {/* Equipos Totales - DATOS REALES DE WAZUH */}
          <div className="bg-slate-800 border border-slate-700 rounded-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-2 bg-purple-500/10 rounded-lg">
                <Users className="h-6 w-6 text-purple-400" />
              </div>
              {statsLoading && (
                <Loader className="animate-spin h-4 w-4 text-purple-400" />
              )}
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">
                {globalStats?.agents.total || 0}
              </div>
              <div className="text-sm text-slate-400">
                Equipos Totales
              </div>
              {globalStats && globalStats.agents.active > 0 && (
                <div className="text-xs text-green-400 mt-1">
                  {globalStats.agents.active} activos
                </div>
              )}
            </div>
          </div>

          {/* Alertas Totales */}
          <div className="bg-slate-800 border border-slate-700 rounded-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="p-2 bg-red-500/10 rounded-lg">
                <AlertTriangle className="h-6 w-6 text-red-400" />
              </div>
              {statsLoading && (
                <Loader className="animate-spin h-4 w-4 text-red-400" />
              )}
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">
                {globalStats?.threats.blocked || 0}
              </div>
              <div className="text-sm text-slate-400">
                Amenazas Bloqueadas
              </div>
            </div>
          </div>
        </div>

        {/* Lista de Empresas */}
        <div className="bg-slate-800 border border-slate-700 rounded-lg">
          <div className="px-6 py-4 border-b border-slate-700">
            <h2 className="text-xl font-semibold text-white flex items-center">
              <Building2 className="h-5 w-5 mr-2 text-blue-400" />
              Empresas Registradas ({companies.length})
            </h2>
          </div>
          
          <div className="p-6">
            {companies.length === 0 ? (
              <div className="text-center py-8">
                <Building2 className="h-12 w-12 text-slate-600 mx-auto mb-3" />
                <p className="text-slate-400 mb-4">No hay empresas registradas</p>
                <button
                  onClick={handleAddCompany}
                  className="inline-flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <Plus className="h-4 w-4" />
                  <span>Crear primera empresa</span>
                </button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {companies.map((company) => (
                  <div key={company.id} className="bg-slate-700 border border-slate-600 rounded-lg p-4 hover:bg-slate-650 transition-colors">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-white mb-1">{company.name}</h3>
                        <p className="text-sm text-slate-400">{company.admin_name}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className={`px-2 py-1 rounded text-xs font-medium border ${getSectorColor(company.sector)}`}>
                          {company.sector}
                        </span>
                        <button
                          onClick={() => handleDeleteCompany(company)}
                          className="p-1 text-red-400 hover:text-red-300 hover
			hover:bg-red-500/10 rounded transition-colors"
                         title={`Eliminar ${company.name}`}
                       >
                         <Trash2 className="h-4 w-4" />
                       </button>
                     </div>
                   </div>
                   
                   <div className="space-y-2">
                     <div className="text-sm">
                       <span className="text-slate-400">Tenant ID:</span>
                       <span className="text-blue-300 ml-2 font-mono text-xs">{company.tenant_id}</span>
                     </div>
                     <div className="text-sm">
                       <span className="text-slate-400">Email:</span>
                       <span className="text-slate-300 ml-2">{company.admin_email}</span>
                     </div>
                     {hasWazuhGroup(company) && (
                       <div className="text-sm">
                         <span className="text-slate-400">Wazuh Group:</span>
                         <span className="text-green-300 ml-2 font-mono text-xs">{getWazuhGroup(company)}</span>
                       </div>
                     )}
                     <div className="text-sm">
                       <span className="text-slate-400">Creado:</span>
                       <span className="text-slate-300 ml-2">
                         {new Date(company.created_at).toLocaleDateString('es-ES')}
                       </span>
                     </div>
                   </div>
                   
                   <div className="mt-4 flex space-x-2">
                     <button className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-1.5 px-3 rounded text-sm transition-colors">
                       Ver Dashboard
                     </button>
                     <button 
                       onClick={() => handleEditCompany(company)}
                       className="bg-slate-600 hover:bg-slate-500 text-white py-1.5 px-3 rounded text-sm transition-colors flex items-center space-x-1"
                     >
                       <Edit className="h-3 w-3" />
                       <span>Editar</span>
                     </button>
                   </div>
                 </div>
               ))}
             </div>
           )}
         </div>
       </div>
     </div>

     {/* Modal de Eliminaci√≥n */}
     {deleteModalOpen && companyToDelete && (
       <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
         <div className="bg-slate-800 border border-slate-700 rounded-lg p-6 max-w-md w-full mx-4">
           <div className="flex items-center mb-4">
             <div className="p-2 bg-red-500/10 rounded-lg mr-3">
               <Trash2 className="h-6 w-6 text-red-400" />
             </div>
             <h3 className="text-lg font-semibold text-white">
               Eliminar Empresa
             </h3>
           </div>

           <div className="mb-4">
             <p className="text-slate-300 mb-2">
               ¬øEst√°s seguro de que quieres eliminar la empresa?
             </p>
             <div className="bg-slate-700 border border-slate-600 rounded-lg p-3 mb-4">
               <p className="text-white font-semibold text-lg">
                 {companyToDelete.name}
               </p>
               <p className="text-slate-400 text-sm">
                 ID: {companyToDelete.id} | Tenant: {companyToDelete.tenant_id}
               </p>
             </div>
             <p className="text-sm text-slate-400 mb-2">
               Para confirmar, escribe el <strong>Tenant ID</strong> exacto de la empresa:
             </p>
             <div className="bg-slate-600 border border-slate-500 rounded-lg p-2 mb-2">
               <p className="text-white font-mono text-sm">
                 {companyToDelete.tenant_id}
               </p>
             </div>
             <input
               type="text"
               value={deleteConfirmText}
               onChange={(e) => setDeleteConfirmText(e.target.value)}
               placeholder={`Escribe: ${companyToDelete.tenant_id}`}
               className="w-full bg-slate-700 border border-slate-600 rounded px-3 py-2 text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 font-mono"
             />
           </div>

           <div className="flex space-x-3">
             <button
               onClick={cancelDelete}
               className="flex-1 bg-slate-600 hover:bg-slate-500 text-white py-2 px-4 rounded transition-colors"
             >
               Cancelar
             </button>
             <button
               onClick={confirmDeleteCompany}
               disabled={deleteConfirmText !== companyToDelete.tenant_id}
               className="flex-1 bg-red-600 hover:bg-red-700 disabled:bg-slate-600 disabled:text-slate-400 text-white py-2 px-4 rounded transition-colors"
             >
               Eliminar
             </button>
           </div>
         </div>
       </div>
     )}

     {/* Modal de Agregar/Editar Empresa */}
     {companyModalOpen && (
       <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
         <div className="bg-slate-800 border border-slate-700 rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto">
           {/* Header del Modal */}
           <div className="flex items-center justify-between p-6 border-b border-slate-700">
             <div className="flex items-center">
               <div className={`p-2 rounded-lg mr-3 ${isEditMode ? 'bg-blue-500/10' : 'bg-green-500/10'}`}>
                 {isEditMode ? (
                   <Edit className="h-6 w-6 text-blue-400" />
                 ) : (
                   <Plus className="h-6 w-6 text-green-400" />
                 )}
               </div>
               <h3 className="text-lg font-semibold text-white">
                 {isEditMode ? 'Editar Empresa' : 'Agregar Nueva Empresa'}
               </h3>
             </div>
             <button
               onClick={closeCompanyModal}
               className="p-2 hover:bg-slate-700 rounded-lg transition-colors"
               title="Cerrar sin guardar"
             >
               <X className="h-5 w-5 text-slate-400" />
             </button>
           </div>

           {/* Formulario */}
           <form onSubmit={handleSubmit} className="p-6">
             {/* Error general */}
             {createError && (
               <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4 mb-6">
                 <div className="flex items-center">
                   <AlertTriangle className="h-5 w-5 text-red-400 mr-3" />
                   <div>
                     <h4 className="text-red-400 font-medium">
                       Error al {isEditMode ? 'actualizar' : 'crear'} empresa
                     </h4>
                     <p className="text-red-300 text-sm mt-1">{createError}</p>
                   </div>
                 </div>
               </div>
             )}

             <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
               {/* Informaci√≥n de la Empresa */}
               <div className="space-y-4">
                 <h4 className="text-white font-medium flex items-center mb-4">
                   <Building2 className="h-4 w-4 mr-2 text-blue-400" />
                   Informaci√≥n de la Empresa
                 </h4>

                 {/* Nombre de la empresa */}
                 <div>
                   <label className="block text-sm font-medium text-slate-300 mb-2">
                     Nombre de la empresa <span className="text-red-400">*</span>
                   </label>
                   <input
                     type="text"
                     value={formData.name || ''}
                     onChange={(e) => handleInputChange('name', e.target.value)}
                     placeholder="Ej: Axafone Telecomunicaciones"
                     className={`w-full bg-slate-700 border rounded px-3 py-2 text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 ${
                       formErrors.name ? 'border-red-500' : 'border-slate-600'
                     }`}
                     maxLength={255}
                   />
                   {formErrors.name && (
                     <p className="text-red-400 text-sm mt-1">{formErrors.name}</p>
                   )}
                 </div>

                 {/* Sector */}
                 <div>
                   <label className="block text-sm font-medium text-slate-300 mb-2">
                     Sector <span className="text-slate-500">(opcional)</span>
                   </label>
                   <select
                     value={formData.sector || ''}
                     onChange={(e) => handleInputChange('sector', e.target.value)}
                     className={`w-full bg-slate-700 border rounded px-3 py-2 text-white focus:outline-none focus:border-blue-500 ${
                       formErrors.sector ? 'border-red-500' : 'border-slate-600'
                     }`}
                   >
                     <option value="">Seleccionar sector</option>
                     <option value="TELECOM">Telecomunicaciones</option>
                     <option value="LEGAL">Legal</option>
                     <option value="RETAIL">Retail</option>
                     <option value="TECH">Tecnolog√≠a</option>
                     <option value="HEALTH">Salud</option>
                     <option value="FINANCE">Finanzas</option>
                     <option value="EDUCATION">Educaci√≥n</option>
                     <option value="MANUFACTURING">Manufactura</option>
                     <option value="OTHER">Otro</option>
                   </select>
                   {formErrors.sector && (
                     <p className="text-red-400 text-sm mt-1">{formErrors.sector}</p>
                   )}
                 </div>
               </div>

               {/* Informaci√≥n del Administrador */}
               <div className="space-y-4">
                 <h4 className="text-white font-medium flex items-center mb-4">
                   <Users className="h-4 w-4 mr-2 text-purple-400" />
                   Administrador
                 </h4>

                 {/* Nombre del administrador */}
                 <div>
                   <label className="block text-sm font-medium text-slate-300 mb-2">
                     Nombre completo <span className="text-slate-500">(opcional)</span>
                   </label>
                   <input
                     type="text"
                     value={formData.admin_name || ''}
                     onChange={(e) => handleInputChange('admin_name', e.target.value)}
                     placeholder="Ej: Juan P√©rez Garc√≠a"
                     className={`w-full bg-slate-700 border rounded px-3 py-2 text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 ${
                       formErrors.admin_name ? 'border-red-500' : 'border-slate-600'
                     }`}
                     maxLength={255}
                   />
                   {formErrors.admin_name && (
                     <p className="text-red-400 text-sm mt-1">{formErrors.admin_name}</p>
                   )}
                 </div>

                 {/* Tel√©fono */}
                 <div>
                   <label className="block text-sm font-medium text-slate-300 mb-2">
                     Tel√©fono <span className="text-slate-500">(opcional)</span>
                   </label>
                   <input
                     type="tel"
                     value={formData.admin_phone || ''}
                     onChange={(e) => handleInputChange('admin_phone', e.target.value)}
                     placeholder="Ej: +34 123 456 789"
                     className={`w-full bg-slate-700 border rounded px-3 py-2 text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 ${
                       formErrors.admin_phone ? 'border-red-500' : 'border-slate-600'
                     }`}
                     maxLength={20}
                   />
                   {formErrors.admin_phone && (
                     <p className="text-red-400 text-sm mt-1">{formErrors.admin_phone}</p>
                   )}
                 </div>

                 {/* Email */}
                 <div>
                   <label className="block text-sm font-medium text-slate-300 mb-2">
                     Email <span className="text-slate-500">(opcional)</span>
                   </label>
                   <input
                     type="email"
                     value={formData.admin_email || ''}
                     onChange={(e) => handleInputChange('admin_email', e.target.value)}
                     placeholder="Ej: admin@empresa.com"
                     className={`w-full bg-slate-700 border rounded px-3 py-2 text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 ${
                       formErrors.admin_email ? 'border-red-500' : 'border-slate-600'
                     }`}
                     maxLength={255}
                   />
                   {formErrors.admin_email && (
                     <p className="text-red-400 text-sm mt-1">{formErrors.admin_email}</p>
                   )}
                 </div>

                 {/* Contrase√±a */}
                 <div>
                   <label className="block text-sm font-medium text-slate-300 mb-2">
                     Contrase√±a <span className="text-slate-500">(opcional)</span>
                     {isEditMode && (
                       <span className="text-slate-500 font-normal ml-2">(dejar vac√≠o para mantener actual)</span>
                     )}
                   </label>
                   <div className="relative">
                     <input
                       type={showPassword ? 'text' : 'password'}
                       value={formData.admin_password || ''}
                       onChange={(e) => handleInputChange('admin_password', e.target.value)}
                       placeholder={isEditMode ? "Nueva contrase√±a (opcional)" : "Se generar√° autom√°ticamente"}
                       className={`w-full bg-slate-700 border rounded px-3 py-2 pr-10 text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 ${
                         formErrors.admin_password ? 'border-red-500' : 'border-slate-600'
                       }`}
                       maxLength={255}
                     />
                     <button
                       type="button"
                       onClick={() => setShowPassword(!showPassword)}
                       className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-300"
                     >
                       {showPassword ? (
                         <EyeOff className="h-4 w-4" />
                       ) : (
                         <Eye className="h-4 w-4" />
                       )}
                     </button>
                   </div>
                   {formErrors.admin_password && (
                     <p className="text-red-400 text-sm mt-1">{formErrors.admin_password}</p>
                   )}
                 </div>
               </div>
             </div>

             {/* Informaci√≥n adicional */}
             <div className="mt-6 p-4 bg-slate-700/50 rounded-lg">
               <h5 className="text-slate-300 font-medium mb-2">Informaci√≥n:</h5>
               <ul className="text-sm text-slate-400 space-y-1">
                 <li>‚Ä¢ Solo el <span className="text-red-400">nombre de la empresa</span> es obligatorio</li>
                 <li>‚Ä¢ Los dem√°s campos son opcionales y se completar√°n autom√°ticamente</li>
                 {!isEditMode && (
                   <li>‚Ä¢ Se generar√° autom√°ticamente un Tenant ID √∫nico para la empresa</li>
                 )}
                 <li>‚Ä¢ Si no se especifica email, se generar√° uno basado en el nombre</li>
                 <li>‚Ä¢ Si no se especifica contrase√±a, se usar√° "password123" por defecto</li>
               </ul>
             </div>

             {/* Botones */}
             <div className="flex justify-end space-x-3 mt-6 pt-6 border-t border-slate-700">
               <button
                 type="button"
                 onClick={closeCompanyModal}
                 disabled={isCreating}
                 className="px-4 py-2 bg-slate-600 hover:bg-slate-500 disabled:bg-slate-700 text-white rounded-lg transition-colors"
               >
                 Cancelar
               </button>
               <button
                 type="submit"
                 disabled={isCreating}
                 className={`px-6 py-2 text-white rounded-lg transition-colors flex items-center space-x-2 ${
                   isEditMode 
                     ? 'bg-blue-600 hover:bg-blue-700 disabled:bg-blue-700' 
                     : 'bg-green-600 hover:bg-green-700 disabled:bg-green-700'
                 }`}
               >
                 {isCreating ? (
                   <>
                     <Loader className="animate-spin h-4 w-4" />
                     <span>{isEditMode ? 'Actualizando...' : 'Creando...'}</span>
                   </>
                 ) : (
                   <>
                     {isEditMode ? (
                       <Edit className="h-4 w-4" />
                     ) : (
                       <Plus className="h-4 w-4" />
                     )}
                     <span>{isEditMode ? 'Actualizar Empresa' : 'Crear Empresa'}</span>
                   </>
                 )}
               </button>
             </div>
           </form>
         </div>
       </div>
     )}
   </div>
 );
};

export default Dashboard;
