# =================================================================
# ZIENSHIELD - DOCKER COMPOSE PARA PRODUCCIÓN CON REVERSE PROXY
# =================================================================

version: '3.8'

networks:
  zienshield-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  proxy-network:
    driver: bridge

volumes:
  backend-logs:
    driver: local
  nginx-logs:
    driver: local
  ssl-certs:
    driver: local

services:
  # =================================================================
  # REVERSE PROXY NGINX (Para servir en puertos 80/443 disponibles)
  # =================================================================
  reverse-proxy:
    image: nginx:1.25-alpine
    container_name: zienshield-proxy
    hostname: zienshield-proxy
    restart: unless-stopped
    
    # Configuración de red
    networks:
      - proxy-network
      - zienshield-network
    
    # Mapeo de puertos a los disponibles del servidor destino
    ports:
      - "3080:80"    # Puerto alternativo si 80 está ocupado
      - "3443:443"   # Puerto alternativo si 443 está ocupado
    
    # Configuración de proxy
    volumes:
      - ssl-certs:/etc/ssl/certs
      - nginx-logs:/var/log/nginx
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - BACKEND_HOST=backend
      - BACKEND_PORT=3001
      - FRONTEND_HOST=frontend
      - FRONTEND_PORT=80
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Limits de recursos
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    depends_on:
      - backend
      - frontend

  # =================================================================
  # BACKEND API SERVICE
  # =================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: zienshield-backend
    hostname: zienshield-backend
    restart: unless-stopped
    
    # Configuración de red
    networks:
      zienshield-network:
        ipv4_address: 172.20.0.10
    
    # NO exponer puertos directamente - solo acceso via proxy
    expose:
      - "3001"
    
    # Variables de entorno desde archivo
    env_file:
      - .env.production
    
    # Volumes para logs persistentes
    volumes:
      - backend-logs:/app/logs
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Limits de recursos
    deploy:
      resources:
        limits:
          cpus: '2.0'        # Más recursos para producción
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    
    depends_on:
      - redis-cache

  # =================================================================
  # FRONTEND SERVICE
  # =================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_VERSION: ${REACT_APP_VERSION:-1.0.0}
        REACT_APP_ENVIRONMENT: production
    
    container_name: zienshield-frontend
    hostname: zienshield-frontend
    restart: unless-stopped
    
    # Configuración de red
    networks:
      zienshield-network:
        ipv4_address: 172.20.0.20
    
    # NO exponer puertos directamente - solo acceso via proxy
    expose:
      - "80"
    
    # Volumes para logs
    volumes:
      - nginx-logs:/var/log/nginx
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    # Limits de recursos
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    
    depends_on:
      backend:
        condition: service_healthy

  # =================================================================
  # REDIS CACHE SERVICE
  # =================================================================
  redis-cache:
    image: redis:7-alpine
    container_name: zienshield-redis
    hostname: zienshield-redis
    restart: unless-stopped
    
    # Configuración de red
    networks:
      zienshield-network:
        ipv4_address: 172.20.0.30
    
    # Configuración Redis optimizada para producción
    command: >
      redis-server 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru 
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    
    # Volumes para persistencia
    volumes:
      - redis-data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Limits de recursos
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Security
    security_opt:
      - no-new-privileges:true

  # =================================================================
  # MONITORING - PROMETHEUS (OPCIONAL)
  # =================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: zienshield-prometheus
    hostname: zienshield-prometheus
    restart: unless-stopped
    
    networks:
      - zienshield-network
    
    # Puerto alternativo para métricas
    ports:
      - "9090:9090"
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Limits de recursos
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    
    depends_on:
      - backend

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local