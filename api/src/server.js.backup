const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');

const app = express();
const PORT = 3001;

// Configuraci√≥n de CORS m√°s permisiva para desarrollo
app.use(cors({
  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());

// Configuraci√≥n de PostgreSQL con usuario espec√≠fico
const pool = new Pool({
  user: 'zienshield_api',
  host: 'localhost',
  database: 'zienshield_multi_tenant',
  password: 'ZienAPI2025!',
  port: 5432,
});

// Test de conexi√≥n al iniciar
async function testConnection() {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW()');
    console.log('‚úÖ Conexi√≥n PostgreSQL exitosa:', result.rows[0].now);
    client.release();
  } catch (error) {
    console.error('‚ùå Error conectando a PostgreSQL:', error.message);
  }
}

// Ruta de prueba
app.get('/api/health', async (req, res) => {
  try {
    const dbResult = await pool.query('SELECT COUNT(*) as company_count FROM companies');
    res.json({ 
      status: 'OK', 
      message: 'ZienSHIELD API funcionando',
      database: 'Conectado',
      companies: parseInt(dbResult.rows[0].company_count),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      message: 'Error de conexi√≥n a la base de datos',
      error: error.message
    });
  }
});

// Obtener todas las empresas
app.get('/api/companies', async (req, res) => {
  try {
    console.log('üìã Solicitando lista de empresas...');
    const result = await pool.query(`
      SELECT 
        id, 
        name, 
        sector, 
        tenant_id, 
        admin_name, 
        admin_email, 
        created_at 
      FROM companies 
      ORDER BY id
    `);
    
    console.log(`‚úÖ Encontradas ${result.rows.length} empresas`);
    
    res.json({
      success: true,
      data: result.rows,
      count: result.rows.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Error obteniendo empresas:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error interno del servidor',
      details: error.message
    });
  }
});

// Obtener empresa por ID
app.get('/api/companies/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üîç Buscando empresa con ID: ${id}`);
    
    const result = await pool.query('SELECT * FROM companies WHERE id = $1', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: 'Empresa no encontrada' 
      });
    }
    
    console.log(`‚úÖ Empresa encontrada: ${result.rows[0].name}`);
    
    res.json({
      success: true,
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Error obteniendo empresa:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error interno del servidor',
      details: error.message
    });
  }
});

// Iniciar servidor
app.listen(PORT, async () => {
  console.log('üöÄ ZienSHIELD API iniciando...');
  console.log(`üì° Servidor corriendo en puerto ${PORT}`);
  console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
  console.log(`üè¢ Empresas: http://localhost:${PORT}/api/companies`);
  console.log('üåê CORS configurado para frontend en puerto 3000');
  console.log('');
  
  // Test de conexi√≥n
  await testConnection();
});

// Manejo de errores de conexi√≥n
pool.on('error', (err) => {
  console.error('‚ùå Error de conexi√≥n PostgreSQL:', err);
});
