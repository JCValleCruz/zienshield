# =================================================================
# ZIENSHIELD FRONTEND - DOCKERFILE OPTIMIZADO PARA PRODUCCIÓN
# =================================================================

# =================================================================
# STAGE 1: BUILD STAGE
# =================================================================
FROM node:18-alpine AS build

WORKDIR /app

# Instalar dependencias de build
RUN apk add --no-cache git python3 make g++

# Copiar archivos de dependencias
COPY super-admin/frontend/package*.json ./
COPY super-admin/frontend/tsconfig.json ./
COPY super-admin/frontend/tailwind.config.js ./
COPY super-admin/frontend/postcss.config.js ./

# Instalar dependencias
RUN npm ci --silent

# Copiar código fuente
COPY super-admin/frontend/src ./src
COPY super-admin/frontend/public ./public

# Variables de entorno para build
ARG REACT_APP_API_URL=http://localhost:3001
ARG REACT_APP_VERSION=1.0.0
ARG REACT_APP_ENVIRONMENT=production

ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_VERSION=$REACT_APP_VERSION
ENV REACT_APP_ENVIRONMENT=$REACT_APP_ENVIRONMENT

# Ejecutar build de producción
RUN npm run build

# =================================================================
# STAGE 2: NGINX RUNTIME
# =================================================================
FROM nginx:1.25-alpine AS runtime

# Metadata
LABEL maintainer="ZienShield Team"
LABEL description="ZienShield Security Platform - Frontend"
LABEL version="1.0.0"

# Instalar dependencias básicas
RUN apk add --no-cache curl tzdata && \
    rm -rf /var/cache/apk/*

# Configurar timezone
ENV TZ=Europe/Madrid

# Copiar archivos build desde stage anterior
COPY --from=build /app/build /usr/share/nginx/html

# Configuración personalizada de Nginx
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    listen [::]:80;
    server_name _;

    # Configuración de seguridad
    server_tokens off;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' http://localhost:3001" always;

    # Configuración de compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Configuración de cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Configuración SPA
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files \$uri \$uri/ /index.html;
        
        # Headers para HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # API Proxy (opcional, si se necesita)
    location /api/ {
        proxy_pass http://backend:3001/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

# Exponer puerto 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Comando de inicio
CMD ["nginx", "-g", "daemon off;"]